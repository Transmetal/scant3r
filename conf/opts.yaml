headers:
  - option: 
    - '-H'
    - "--header"
  - type: string
  - default: '{}'
  - save_content: true
  - help: "add custom header (ex:-H='Cookie: test=1; PHPSESSID=test')"
  - exec: "dict_args['headers'] = extract_headers(value)"

cookies: 
  - option:
    - '-C'
    - '--cookie'
  - type : string
  - default: '{}'
  - save_content : true 
  - help: "add cookie to the header (ex: 'cookie1=1; cookie2=2')"
  - exec: "dict_args['cookies'] = extract_cookie(value)"

log_mode:
  - option: 
    - '-v'
    - '--logger-mode'
  - type: int
  - default: 1
  - save_content: true
  - help: 'change debug messages mode (1: info 2: debug 3: warning 4: error)'
  - exec: |
      logs = {1:logging.INFO,2:logging.DEBUG,3:logging.WARNING,4:logging.ERROR}
      logger = logging.getLogger("scant3r")
      logger.setLevel(logs[value])
      ch = logging.StreamHandler()
      ch.setLevel(logs[value])
      ch.setFormatter(CustomFormatter())
      logger.addHandler(ch)



delay:
  - option: 
    - '-s'
    - '--sleep'
  - type: int
  - default: 0
  - save_content: true
  - help: 'number of seconds to hold between each HTTP(S) requests.'
  - exec: "dict_args['delay'] = int(value)"


methods:
  - option: 
    - '-M'
    - '--method'
  - type: string
  - default: 'GET,POST'
  - save_content: true
  - help: 'Methods Allowed on your target'
  - exec: | 
      dict_args['methods'] = value.split(",")

modules:
  - option: 
    - '-m'
    - '--module'
  - help: 'run scant3r module (ex: -m=example)'
  - type: string
  - default: '[]'
  - default_action: |
      yaml.safe_load(open('conf/main_scan.yaml','r'))
  - save_content: true
  - exec: |
      if type(value) == list:
        dict_args['modules'] = value
      else:
        dict_args['modules'] = value.split(",")
more_scan:
  - option: 
    - '-O'
    - '--more-scan'
  - help: 'scanning with the current module with import another modules (eg: lorsrf xss/ssti scanner)'
  - type: boolean
  - default: false
  - save_content: false
  - exec: "dict_args['more_scan'] = value"

lorsrf_parameters:
  - option:
    - '-P'
    - '--lorsrf-parameters'
  - help: 'how many parameters in one request for lorsrf module'
  - type: int
  - default: 10
  - save_content: true
  - exec: "dict_args['lorsrf_parameters'] = value" 

targetlist:
  - option: 
    - '-l'
    - '--list'
  - type: boolean
  - default: False
  - help: 'add targets list'
  - save_content: true
  - exec: |
        try:
          dict_args['targetlist'] = open(value,'r')
          for url in dict_args['targetlist']:
            dict_args['urls'].append(url.rstrip())
        except Exception as e:
            print(e)
            exit()

genparam:
  - option: 
    - '-g'
    - '--add-parameters'
  - type: boolean
  - default: false
  - help: "Generate Famouse Parameters if your url dosen't have parameters"
  - save_content: false
  - exec: "dict_args['genparam'] = value"

json:
  - option:
    - '-j'
    - '--json'
  - type: boolean
  - default: false
  - help: "JSON Request Body"
  - save_content: false
  - exec: "dict_args['json'] = value"

proxy:
  - option: 
    - '-p'
    - '--proxy'
  - help: 'Forward all requests to proxy'
  - type: string
  - default: '{}'
  - save_content: true
  - exec: "dict_args['proxy'] = {'http':value.replace('https://','http://'),'https':value}"

allow_redirects:
  - option: 
    - '-r'
    - '--follow-redirects'
  - type: boolean
  - default: false
  - help: 'Follow redirects'
  - save_content: false
  - exec: "dict_args['allow_redirects'] = value"

blindxss:
  - option:
    - '-b'
    - '--blind-host'
  - type: string
  - default: ''
  - help: 'add your xsshunter host (or any xss host)'
  - save_content: true
  - exec: "dict_args['blindxss'] = value"

host:
  - option: 
    - '-x'
    - '--host'
  - type: string
  - default: ''
  - help: 'add your host (burpcall,etc..)'
  - save_content: true
  - exec: "dict_args['host'] = value"

random_agents:
  - option: 
    - '-R'
    - '--random-agents'
  - type: boolean
  - default: false
  - help: 'use random user agent'
  - save_content: false
  - exec: "dict_args['random_agents'] = True"

threads:
  - option: 
    - '-w'
    - '--workers'
  - type: int
  - default: 50
  - help: 'Number of workers (default: 50)'
  - save_content: true
  - exec: "dict_args['threads'] = value"

timeout:
  - option: 
    - '-t'
    - '--timeout'
  - type: int
  - default: 10
  - help: 'set connection timeout (default: 10)'
  - save_content: true
  - exec: "dict_args['timeout'] = value"
